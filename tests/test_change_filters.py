import json
from typing import Optional

import hikaru
import pytest
from hikaru import DiffDetail
from hikaru.model.rel_1_26 import Deployment

from robusta.core.model.k8s_operation_type import K8sOperationType
from robusta.integrations.kubernetes.autogenerated.events import KubernetesAnyChangeEvent
from robusta.integrations.kubernetes.base_triggers import (
    DEFAULT_CHANGE_IGNORE,
    DEFAULT_CHANGE_INCLUDE,
    K8sBaseTrigger,
    K8sTriggerChangeFilters,
)


class TestK8sBaseTrigger:
    def test_init_no_change_filters(self):
        trigger = K8sBaseTrigger(kind="hello")
        assert trigger.change_filters is None

    @pytest.mark.parametrize(
        "input_change_filters,expected_change_filters",
        [
            ({"include": ["a", "b"]}, {"include": ["a", "b"], "ignore": DEFAULT_CHANGE_IGNORE}),
            ({"ignore": ["c", "d"]}, {"include": DEFAULT_CHANGE_INCLUDE, "ignore": ["c", "d"]}),
            ({"include": ["x", "y"], "ignore": ["p", "q"]}, {"include": ["x", "y"], "ignore": ["p", "q"]}),
        ],
    )
    def test_init(self, input_change_filters, expected_change_filters):
        trigger = K8sBaseTrigger(kind="hello", change_filters=K8sTriggerChangeFilters(**input_change_filters))
        assert trigger.change_filters == expected_change_filters

    @pytest.fixture()
    def event(self):
        with open("tests/k8s_change_obj.json") as f:
            data = json.loads(f.read())
        return KubernetesAnyChangeEvent(
            operation=K8sOperationType.UPDATE,
            old_obj=hikaru.from_dict(data, Deployment),
            obj=hikaru.from_dict(data, Deployment),
        )

    @pytest.fixture()
    def trigger(self):
        return K8sBaseTrigger(change_filters=K8sTriggerChangeFilters(), kind="hello")

    def _set_attr_by_path(self, obj, field_path: str, new_val):
        attr_path = field_path.split(".")
        for attr_name in attr_path[:-1]:
            obj = getattr(obj, attr_name)
        setattr(obj, attr_path[-1], new_val)

    @pytest.mark.parametrize("change_field", [None] + DEFAULT_CHANGE_IGNORE)
    def test_check_change_filters_no_change(self, change_field: Optional[str], event, trigger):
        if change_field:
            self._set_attr_by_path(event.obj, change_field, 987654321)
        assert trigger.check_change_filters(event) is False
        assert hasattr(event, "obj_filtered")
        assert hasattr(event, "old_obj_filtered")
        assert event.filtered_diffs == []

    @pytest.mark.parametrize(
        "change_field,new_value,old_value,expected_change_path,expected_diff_new_value",
        [
            ("spec.selector.matchLabels", {"app": "X"}, "xxx", "Deployment.spec.selector.matchLabels['app']", "X"),
            ("spec.progressDeadlineSeconds", 300, 600, "Deployment.spec.progressDeadlineSeconds", 300),
            ("spec.revisionHistoryLimit", 15, 10, "Deployment.spec.revisionHistoryLimit", 15),
        ],
    )
    def test_check_change_filters_changes(
        self, change_field: str, new_value, old_value, expected_change_path, expected_diff_new_value, event, trigger
    ):
        self._set_attr_by_path(event.obj, change_field, new_value)
        assert trigger.check_change_filters(event) is True
        assert hasattr(event, "obj_filtered")
        assert hasattr(event, "old_obj_filtered")
        assert all(isinstance(diff, DiffDetail) for diff in event.filtered_diffs)
        diff = event.filtered_diffs[0]
        assert diff.formatted_path == expected_change_path
        assert diff.other_value == old_value
        assert diff.value == expected_diff_new_value
