.. _what-are-playbooks:

What are Playbooks?
################################
This guide is a deep dive on playbooks and how Robusta executes them.

For a high-level overview of what playbooks can do, see :ref:`What is Robusta?`

For detailed reference on configuring playbooks, see :ref:`Custom Playbooks`.

Playbooks are Triggers and Actions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Every playbook consists of a condition (*trigger*) and a set of instructions (*actions*) defining the response.

**Triggers** are event-driven, firing at specific moments when something occurs in your cluster. Examples include:

* ``on_prometheus_alert``
* ``on_deployment_update``
* ``on_pod_crash_loop``

Robusta continuously listens to your cluster and evaluates triggers. A playbook can have more than one trigger, in which case a single trigger is sufficient to start execution.

**Actions** perform tasks in response to triggers, such as collecting information, investigating issues, or fixing problems.
Playbooks can contain multiple actions, which are executed in order.

Understanding Playbook Execution with an Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Consider the scenario from :ref:`What is Robusta <What is Robusta?>` where a Prometheus alert named *KubePodCrashLooping* triggers a playbook.

The playbook is configured using YAML as follows:

.. code-block:: yaml

    - triggers:
      - on_prometheus_alert:
          alert_name: KubePodCrashLooping
      actions:
      - logs_enricher: {}

When the playbook is executed, Robusta enhances the alert, as shown in the image below:

.. image:: /images/prometheus-alert-with-robusta.png
    :width: 800px

In the above example, the trigger was ``on_prometheus_alert`` and the action was ``logs_enricher``.

Playbooks are Pipelines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
All events coming into Robusta are matched against triggers. Any matching events then flow to actions, and finally,
any notifications generated by the actions are sent to all configured :ref:`sinks <Sending Notifications>`.

Every Event in the Pipeline Has a Type
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Each trigger outputs an event of a specific type, and each action expects a typed event as input.

For example, the ``on_prometheus_alert`` trigger outputs a *PrometheusAlert* event, while ``on_pod_update`` outputs a *PodChangeEvent.*

These events flow into the actions section, where each action is compatible with a subset of event types.
For instance, the ``logs_enricher`` action expects to receive events that have a Pod object, such as *PrometheusAlert*, *PodEvent*, or *PodChangeEvent*.

When configuring Robusta playbooks you don't need to worry about all these details. You can just look at each trigger and see which actions are supported.

Events Can Trigger Multiple Playbooks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If multiple triggers match an incoming event, all relevant playbooks execute in the order they were defined. For example:

.. code-block:: yaml

   # first playbook
   - triggers:
     - on_deployment_create: {}
     actions:
     - my_first_action: {}

   # second playbook
   - triggers:
     - on_deployment_create: {}
     actions:
     - my_second_action: {}

In the example above, ``my_first_action`` runs before ``my_second_action``.

Stopping Playbook Execution
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
An action can :ref:`stop the processing flow <stop_processing>` if needed, preventing subsequent actions from being run.

This is useful for actions like :ref:`node_restart_silencer <node_restart_silencer>`, which silence alerts that are known false positives.

Only actions following the current action will be stopped. Therefore, silencers must appear before other playbooks in Robusta's configuration.