from ..model.pods import pod_most_recent_oom_killed_state
from ...core.playbooks.base_trigger import TriggerEvent
from ...integrations.kubernetes.autogenerated.triggers import (
    PodUpdateTrigger,
    PodChangeEvent,
)
from ...integrations.kubernetes.base_triggers import K8sTriggerEvent
from ...utils.rate_limiter import RateLimiter


class PodOOMKilledTrigger(PodUpdateTrigger):
    """
    :var rate_limit: Limit firing to once every `rate_limit` seconds
    """

    rate_limit: int = 0

    def __init__(
            self,
            name_prefix: str = None,
            namespace_prefix: str = None,
            labels_selector: str = None,
            rate_limit: int = 0,
    ):
        super().__init__(
            name_prefix=name_prefix,
            namespace_prefix=namespace_prefix,
            labels_selector=labels_selector,
        )
        self.rate_limit = rate_limit

    def should_fire(self, event: TriggerEvent, playbook_id: str):
        should_fire = super().should_fire(event, playbook_id)
        if not should_fire:
            return should_fire

        if not isinstance(event, K8sTriggerEvent):
            return False

        exec_event = self.build_execution_event(event, {})

        if not isinstance(exec_event, PodChangeEvent):
            return False

        pod = exec_event.get_pod()

        oom_killed = pod_most_recent_oom_killed_state(pod, only_current_state=True)

        if not oom_killed:
            return False

        # Perform a rate limit for this pod according to the rate_limit parameter
        name = (
            pod.metadata.ownerReferences[0].name
            if pod.metadata.ownerReferences
            else pod.metadata.name
        )
        namespace = pod.metadata.namespace
        return RateLimiter.mark_and_test(
            f"PodOOMKilledTrigger_{playbook_id}",
            namespace + ":" + name,
            self.rate_limit,
        )
