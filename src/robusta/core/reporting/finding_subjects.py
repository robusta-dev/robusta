from typing import Union, Optional
from ...integrations.kubernetes.autogenerated.events import RobustaDeployment, RobustaJob, RobustaPod, v1ClusterRole, v1ClusterRoleBinding, v1DaemonSet, v1Event, v1HorizontalPodAutoscaler, v1Namespace, v1Node, v1ReplicaSet, v1Service, v1ServiceAccount, v1StatefulSet, v2beta1ClusterRole, v2beta1ClusterRoleBinding, v2beta1DaemonSet, v2beta1Event, v2beta1HorizontalPodAutoscaler, v2beta1Namespace, v2beta1Node, v2beta1ReplicaSet, v2beta1Service, v2beta1ServiceAccount, v2beta1StatefulSet, v2beta2ClusterRole, v2beta2ClusterRoleBinding, v2beta2DaemonSet, v2beta2Event, v2beta2HorizontalPodAutoscaler, v2beta2Namespace, v2beta2Node, v2beta2ReplicaSet, v2beta2Service, v2beta2ServiceAccount, v2beta2StatefulSet
from .base import FindingSubject
from .consts import FindingSubjectType


class KubeObjFindingSubject(FindingSubject):
    UnionKubernetesObjects = Optional[Union[
        RobustaDeployment, RobustaJob, RobustaPod, v1ClusterRole, v1ClusterRoleBinding, v1DaemonSet, v1Event,
        v1HorizontalPodAutoscaler, v1Namespace, v1Node, v1ReplicaSet, v1Service, v1ServiceAccount, v1StatefulSet,
        v2beta1ClusterRole, v2beta1ClusterRoleBinding, v2beta1DaemonSet, v2beta1Event, v2beta1HorizontalPodAutoscaler,
        v2beta1Namespace, v2beta1Node, v2beta1ReplicaSet, v2beta1Service, v2beta1ServiceAccount, v2beta1StatefulSet,
        v2beta2ClusterRole, v2beta2ClusterRoleBinding, v2beta2DaemonSet, v2beta2Event, v2beta2HorizontalPodAutoscaler,
        v2beta2Namespace, v2beta2Node, v2beta2ReplicaSet, v2beta2Service, v2beta2ServiceAccount, v2beta2StatefulSet]]

    def __init__(self, obj: UnionKubernetesObjects = None, finding_subject_type: FindingSubjectType = None):
        if not finding_subject_type:
            finding_subject_type = FindingSubjectType.from_kind(obj.kind)
        super(KubeObjFindingSubject, self).__init__(
            obj.metadata.name,
            finding_subject_type,
            obj.metadata.namespace,
            KubeObjFindingSubject.get_node_name(obj)
        )

    @staticmethod
    def get_node_name(obj: UnionKubernetesObjects):
        try:
            if obj.kind == "Node":
                return obj.metadata.name
            elif (
                    obj
                    and hasattr(obj, "spec")
                    and hasattr(obj.spec, "nodeName")
            ):
                return obj.spec.nodeName
        except:
            pass
        return None


class PodFindingSubject(FindingSubject):
    def __init__(
        self,
        pod: RobustaPod = None
    ):
        super(PodFindingSubject, self).__init__(
            pod.metadata.name,
            FindingSubjectType.TYPE_POD,
            pod.metadata.namespace,
            pod.spec.nodeName
        )