import re
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from urllib.parse import unquote_plus, urlparse

from hikaru.model import DaemonSet, HorizontalPodAutoscaler, Node, StatefulSet
from pydantic import BaseModel

from robusta.core.reporting import Finding, FindingSeverity, FindingSource, FindingSubject, FindingSubjectType
from robusta.integrations.kubernetes.autogenerated.events import (
    DaemonSetEvent,
    DeploymentEvent,
    HorizontalPodAutoscalerEvent,
    JobEvent,
    NodeEvent,
    PodEvent,
    StatefulSetEvent,
)
from robusta.integrations.kubernetes.custom_models import RobustaDeployment, RobustaJob, RobustaPod

SEVERITY_MAP = {
    "critical": FindingSeverity.HIGH,
    "error": FindingSeverity.MEDIUM,
    "warning": FindingSeverity.LOW,
    "info": FindingSeverity.INFO,
}


# for parsing incoming data
class HelmAlert(BaseModel):
    endsAt: datetime
    generatorURL: str
    startsAt: datetime
    fingerprint: Optional[str] = ""
    status: str
    labels: Dict[Any, Any]
    annotations: Dict[Any, Any]


# for parsing incoming data
class AlertManagerEvent(BaseModel):
    alerts: List[HelmAlert] = []
    externalURL: str
    groupKey: str
    version: str
    commonAnnotations: Optional[Dict[Any, Any]] = None
    commonLabels: Optional[Dict[Any, Any]] = None
    groupLabels: Optional[Dict[Any, Any]] = None
    receiver: str
    status: str


# everything here needs to be optional due to annoying subtleties regarding dataclass inheritance
# see explanation in the code for BaseEvent
@dataclass
class HelmKubernetesAlert(
    PodEvent, NodeEvent, DeploymentEvent, JobEvent, DaemonSetEvent, StatefulSetEvent, HorizontalPodAutoscalerEvent
):
    alert: Optional[HelmAlert] = None
    alert_name: Optional[str] = None
    alert_severity: Optional[str] = None
    label_namespace: Optional[str] = None
    node: Optional[Node] = None
    pod: Optional[RobustaPod] = None
    deployment: Optional[RobustaDeployment] = None
    job: Optional[RobustaJob] = None
    daemonset: Optional[DaemonSet] = None
    statefulset: Optional[StatefulSet] = None
    hpa: Optional[HorizontalPodAutoscaler] = None

    def get_title(self) -> str:
        # todo
        return None

    def get_description(self) -> str:
        # todo
        return None

    def get_alert_subject(self) -> FindingSubject:
        # todo
        return None

    def create_default_finding(self) -> Finding:
        #TODO
        # alert_subject = self.get_alert_subject()
        # status_message = "[RESOLVED] " if self.alert.status.lower() == "resolved" else ""
        # title = f"{status_message}{self.get_title()}"
        #
        # ends_at = self.alert.endsAt if self.alert.endsAt.timestamp() > 0 else None
        return Finding(
            title=None,
            description=self.get_description(),
            source=FindingSource.PROMETHEUS,
            aggregation_key=self.alert_name,
            severity=SEVERITY_MAP.get(self.alert.labels.get("severity"), FindingSeverity.INFO),
            subject=None, #TODO
            fingerprint=self.alert.fingerprint,
            starts_at=self.alert.startsAt,
            ends_at=None, #TODO
            add_silence_url=True,
            silence_labels=self.alert.labels,
        )

    def get_subject(self) -> FindingSubject:
        return self.get_alert_subject()

    @classmethod
    def get_source(cls) -> FindingSource:
        return FindingSource.HELM

    def get_resource(self) -> Optional[Union[RobustaPod, DaemonSet, RobustaDeployment, StatefulSet, Node, RobustaJob]]:
        kind = self.get_subject().subject_type
        if kind == FindingSubjectType.TYPE_DEPLOYMENT:
            return self.deployment
        elif kind == FindingSubjectType.TYPE_DAEMONSET:
            return self.daemonset
        elif kind == FindingSubjectType.TYPE_STATEFULSET:
            return self.statefulset
        elif kind == FindingSubjectType.TYPE_NODE:
            return self.node
        elif kind == FindingSubjectType.TYPE_POD:
            return self.pod
        elif kind == FindingSubjectType.TYPE_JOB:
            return self.job
        elif kind == FindingSubjectType.TYPE_HPA:
            return self.hpa
        return None
