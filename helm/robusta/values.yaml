# most of this file is documented at https://docs.robusta.dev/master/user-guide/configuration.html
# if you have any questions, feel free to ask via github issues or Slack (see link on robusta.dev)

# playbook repositories
playbookRepos: []

# sinks configurations
sinksConfig: []

# global parameters
clusterName: ""
clusterZone: ""

# see https://docs.robusta.dev/master/user-guide/configuration.html#global-config
globalConfig:
  grafana_url: ""
  grafana_api_key: ""
  grafana_dashboard_uid: ""
  prometheus_url: ""
  account_id: ""
  signing_key: ""

# install prometheus, alert-manager, and grafana along with Robusta?
enablePrometheusStack: false
enableServiceMonitors: false

# disable messages routed by Robusta cloud
disableCloudRouting: false

# Enable loading playbooks to a persistent volume
playbooksPersistentVolume: false

# custom user playbooks
customPlaybooks: []

# builtin playbooks
builtinPlaybooks:
# playbooks for non-prometheus based monitoring
- triggers:
  - on_pod_update: {}
  actions:
  - restart_loop_reporter:
      restart_reason: CrashLoopBackOff
  - image_pull_backoff_reporter:
      rate_limit: 3600
- triggers:
  - on_node_update: {}
  actions:
  - node_health_watcher: {}
# playbooks for prometheus enrichment and silencing
- triggers:
  - on_prometheus_alert: {}
  actions:
  - name_silencer:
      names: ["Watchdog", "KubeSchedulerDown", "KubeControllerManagerDown"]
- triggers:
  - on_prometheus_alert:
      alert_name: KubeNodeNotReady
  actions:
  - node_allocatable_resources_enricher: {}
  - node_running_pods_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: KubernetesDaemonsetMisscheduled
  actions:
  - daemonset_status_enricher: {}
  - daemonset_misscheduled_analysis_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: HostHighCpuLoad
  actions:
  - node_cpu_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: HostOomKillDetected
  actions:
  - oom_killer_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: CPUThrottlingHigh
  actions:
  - cpu_throttling_analysis_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: KubernetesDeploymentReplicasMismatch
  actions:
  - deployment_status_enricher: {}
- triggers:
  - on_prometheus_alert: {}
  actions:
  - default_enricher: {}

# additional builtin playbooks to enable when using Robusta UI
# these are disabled by default without the UI because they are spammy when sent to slack

enablePlatformPlaybooks: false

platformPlaybooks:
- triggers:
  - on_kubernetes_warning_event: {}
  actions:
  - event_report: {}
  - event_resource_events: {}
  sinks:
    - "robusta_ui_sink"
- triggers:
    - on_deployment_update: {}
  actions:
    - resource_babysitter: {}
  sinks:
    - "robusta_ui_sink"
- triggers:
    - on_daemonset_update: {}
  actions:
    - resource_babysitter: {}
  sinks:
    - "robusta_ui_sink"
- triggers:
    - on_statefulset_update: {}
  actions:
    - resource_babysitter: {}
  sinks:
    - "robusta_ui_sink"

# parameters for the robusta forwarder deployment
kubewatch:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/kubewatch:v1.11
  imagePullPolicy: IfNotPresent
  pprof: True
  resources:
    requests:
      memory: 512Mi
    limits:
      cpu: ~

# parameters for the renderer service used in robusta runner to render grafana graphs
grafanaRenderer:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/grafana-renderer:5
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: 512Mi
    limits:
      cpu: ~

# parameters for the robusta runner
runner:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/robusta-runner:0.0.0
  imagePullPolicy: IfNotPresent
  log_level: INFO
  sentry_dsn:
  resources:
    requests:
      memory: 1024Mi
    limits:
      cpu: ~
  additional_env_vars: ""

kube-prometheus-stack:
  alertmanager:
    tplConfig: true
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: [ 'job' ]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: 'robusta'
        routes:
          - match:
              alertname: Watchdog
            receiver: 'null'
      receivers:
        - name: 'null'
        - name:  'robusta'
          webhook_configs:
            - url: 'http://robusta-runner.{{ .Release.Namespace }}.svc.cluster.local/api/alerts'
              send_resolved: true
  kubeProxy:
    enabled: false
  prometheus:
    prometheusSpec:
      retention: 14d
      # we set a value slightly lower than the 100Gi below
      # the retentionSize uses the suffix GB but it is really Gi units
      # that is, the retentionSize is measured in base2 units just like Gi, Mi, etc
      retentionSize: "99GB"

      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 100Gi
