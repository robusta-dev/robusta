# playbooks sets
playbook_sets: []

# global parameters
clusterName: ""
clusterZone: ""

globalConfig:
  grafana_url: ""
  grafana_api_key: ""
  grafana_dashboard_uid: ""
  prometheus_url: ""
  account_id: ""
  signing_key: ""


# slack integration params
slackApiKey: ""
slackChannel: ""

# robusta ui integration params
robustaApiKey: ""

# install prometheus, alert-manager, and grafana along with Robusta?
enablePrometheusStack: false
enableServiceMonitors: false

# custom user playbooks
customPlaybooks: []

# builtin playbooks
builtinPlaybooks:
- triggers:
  - on_prometheus_alert: {}
  actions:
  - name_silencer:
      names: ["Watchdog", "KubeSchedulerDown", "KubeControllerManagerDown"]
- triggers:
  - on_pod_update: {}
  actions:
  - restart_loop_reporter:
      restart_reason: CrashLoopBackOff
- triggers:
  - on_prometheus_alert:
      alert_name: KubeNodeNotReady
  actions:
  - node_allocatable_resources_enricher: {}
  - node_running_pods_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: KubernetesDaemonsetMisscheduled
  actions:
  - daemonset_enricher: {}
  - daemonset_misscheduled_analysis_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: HostHighCpuLoad
  actions:
  - node_cpu_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: HostOomKillDetected
  actions:
  - oom_killer_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: CPUThrottlingHigh
  actions:
  - cpu_throttling_analysis_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: KubernetesDeploymentReplicasMismatch
  actions:
  - deployment_status_enricher: {}
- triggers:
  - on_prometheus_alert: {}
  actions:
  - default_enricher: {}

# additional builtin playbooks to enable when using Robusta UI
# these are disabled by default without the UI because they are spammy when sent to slack
platformPlaybooks:
- triggers:
    - on_deployment_update: {}
  actions:
    - resource_babysitter: {}
  sinks:
    - "robusta_ui_sink"
- triggers:
    - on_daemonset_update: {}
  actions:
    - resource_babysitter: {}
  sinks:
    - "robusta_ui_sink"
- triggers:
    - on_statefulset_update: {}
  actions:
    - resource_babysitter: {}
  sinks:
    - "robusta_ui_sink"

# parameters for the robusta forwarder deployment
kubewatch:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/kubewatch:v1.11
  imagePullPolicy: IfNotPresent
  pprof: True
  resources:
    requests:
      memory: 512Mi
    limits:
      cpu: ~

# parameters for the renderer service used in robusta runner to render grafana graphs
grafanaRenderer:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/grafana-renderer:5
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      memory: 512Mi
    limits:
      cpu: ~

# parameters for the robusta runner
runner:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/robusta-runner:0.0.0
  imagePullPolicy: IfNotPresent
  log_level: INFO
  resources:
    requests:
      memory: 1024Mi
    limits:
      cpu: ~

kube-prometheus-stack:
  alertmanager:
    tplConfig: true
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: [ 'job' ]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: 'robusta'
        routes:
          - match:
              alertname: Watchdog
            receiver: 'null'
      receivers:
        - name: 'null'
        - name:  'robusta'
          webhook_configs:
            - url: 'http://robusta-runner.{{ .Release.Namespace }}.svc.cluster.local/api/alerts'
              send_resolved: true
  kubeProxy:
    enabled: false
