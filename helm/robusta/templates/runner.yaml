apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-runner
  labels:
    app: {{ .Release.Name }}-runner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-runner
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-runner
        robustaComponent: "runner"
    spec:
      serviceAccountName: {{ .Release.Name }}-runner-service-account
      containers:
      - name: runner
        image: {{ .Values.runner.image }}
        imagePullPolicy: {{ .Values.runner.imagePullPolicy }}
        securityContext:
          privileged: false
        env:
          - name: PLAYBOOKS_CONFIG_FILE_PATH
            value: /etc/robusta/config/active_playbooks.yaml
          - name: ENABLE_MANHOLE
            value: "true"
          - name: ENABLE_COLORED_LOGS
            value: "true"
          - name: LOG_LEVEL
            value: {{ .Values.runner.log_level }}
          - name: INSTALLATION_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          {{- if .Values.disableCloudRouting }}
          - name: CLOUD_ROUTING
            value: "False"
          {{- end }}
          - name: RUNNER_VERSION
            value: {{ .Chart.AppVersion }}
        volumeMounts:
          - name: playbooks-config
            mountPath: /etc/robusta/config
          {{- if .Values.playbooksPersistentVolume }}
          - name: persistent-playbooks-storage
            mountPath: /etc/robusta/playbooks/storage
          {{- end }}
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "kill -SIGINT 1"]
        resources:
          requests:
            memory: {{ .Values.runner.resources.requests.memory | quote }}
          limits:
            memory: {{ .Values.runner.resources.requests.memory | quote }}
            {{ if .Values.runner.resources.limits.cpu }}cpu: {{ .Values.runner.resources.limits.cpu | quote }}{{ end }}
      - name: grafana-renderer
        image: {{ .Values.grafanaRenderer.image }}
        imagePullPolicy: {{ .Values.grafanaRenderer.imagePullPolicy }}
        securityContext:
          privileged: false
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "kill -SIGINT 1"]
        resources:
          requests:
            memory: {{ .Values.grafanaRenderer.resources.requests.memory | quote }}
          limits:
            memory: {{ .Values.grafanaRenderer.resources.requests.memory | quote }}
            {{ if .Values.grafanaRenderer.resources.limits.cpu }}cpu: {{ .Values.grafanaRenderer.resources.limits.cpu | quote }}{{ end }}
      volumes:
        - name: playbooks-config
          configMap:
            name: robusta-playbooks-config
            optional: true
        {{- if .Values.playbooksPersistentVolume }}
        - name: persistent-playbooks-storage
          persistentVolumeClaim:
            claimName: persistent-playbooks-pv-claim
        {{- end }}
{{- if .Values.playbooksPersistentVolume }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: persistent-playbooks-pv-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 128Mi
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-runner
  labels:
    app: {{ .Release.Name }}-runner
spec:
  selector:
    app: {{ .Release.Name }}-runner
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 5000
---
{{ if .Values.enableServiceMonitors }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: robusta-runner-service-monitor
  labels:
    # this label is how the Prometheus installed with Robusta finds ServiceMonitors
    # TODO: we probably need to add custom labels here for a Prometheus installed separately
    release: {{ .Release.Name }}
spec:
  endpoints:
    - path: /metrics
      port: http
  selector:
    matchLabels:
      app: {{ .Release.Name }}-runner
{{ end }}